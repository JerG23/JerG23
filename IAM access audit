# IAM Access Audit Script for Identifying Unauthorized Users/Roles (e.g., CloudCheckr)

import boto3
import pandas as pd
import os
import logging
import traceback
import re
from datetime import datetime

# --- Configuration ---
TARGET_PROFILES = [
    "ir-doi-gpsi", "doi-trimble-prod-com", "imagery-data-management", "nhd-plus", "doi-keycloak-prod-com-1",
    "doi-keycloak-prod-com-2", "doi-osmre", "boem-odgip-prod-com", "fws-iris-mgmt-com", "fws-iris-prod-com",
    "fws-ecosphere-sandbox-com", "fws-ecosphere-common", "fws-ecosphere-dev", "fws-ecosphere-prod-com",
    "fws-ecosphere-test", "usgs-wim-wma", "gomcollab", "usgs-wim-prod", "usgs-wim-fws-cbrs", "usgs-wim-main",
    "usgs-wim-streamstats", "usgs-wim-fws-wetlands", "osmre-eamlis-prod-com", "usgs-shira-prod-com",
    "fws-tracs-prod", "bor-mp-gis", "doi-datainventory-dev-com", "fema-disasters-prod", "fema-disasters-sandbox",
    "fema-rmd-prod", "fema-rmd-1", "fema-rmd-2", "bia-bogs-prod-com", "nps-doi-1", "nps-doi-2",
    "nps-mapbox-prod-com", "nps-mapbox-dev-com", "nps-cartos-prod-com", "nps-cartos-dev-com",
    "nps-usmp-prod-com", "oas-safecom-staging", "doi-usdaiipp-prod-com", "usgs-trails-dev",
    "usgs-trails-prod", "doi-borgis-prod-com", "doi-ocio-ac-prod-com"
]
DEFAULT_REGION = "us-east-1"
OUTPUT_DIR = ""
LOG_LEVEL = logging.INFO
UNAUTHORIZED_ACCOUNTS = ["123456789012"]  # Replace with actual legacy vendor account IDs

# --- Logging Setup ---
_LOGGER = logging.getLogger(__name__)
_LOGGER.setLevel(LOG_LEVEL)
log_handler = logging.StreamHandler()
log_formatter = logging.Formatter('%(levelname)s:%(asctime)s:%(name)s:%(message)s')
log_handler.setFormatter(log_formatter)
if not _LOGGER.hasHandlers():
    _LOGGER.addHandler(log_handler)

# --- Main Function ---
def check_iam_roles_and_users(profile_name):
    session = boto3.Session(profile_name=profile_name, region_name=DEFAULT_REGION)
    iam_client = session.client('iam')
    sts_client = session.client('sts')
    account_id = sts_client.get_caller_identity()["Account"]

    suspicious_roles = []
    suspicious_users = []

    # Check roles
    roles = iam_client.list_roles()["Roles"]
    for role in roles:
        trust_policy = role.get("AssumeRolePolicyDocument", {})
        statements = trust_policy.get("Statement", [])
        for stmt in statements:
            principal = stmt.get("Principal", {})
            if isinstance(principal, dict) and "AWS" in principal:
                aws_principal = principal["AWS"]
                if isinstance(aws_principal, str):
                    aws_principal = [aws_principal]
                for arn in aws_principal:
                    for acct in UNAUTHORIZED_ACCOUNTS:
                        if acct in arn:
                            suspicious_roles.append({"RoleName": role["RoleName"], "AccountId": account_id, "Principal": arn})

    # Check users (example just lists all users; expand for more detailed checks)
    users = iam_client.list_users()["Users"]
    for user in users:
        if re.search("cloudcheckr", user["UserName"], re.IGNORECASE):
            suspicious_users.append({"UserName": user["UserName"], "AccountId": account_id})

    return account_id, suspicious_roles, suspicious_users

# --- Execute Script ---
if __name__ == "__main__":
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"{timestamp}_iam_audit.xlsx"
    if OUTPUT_DIR:
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        output_file = os.path.join(OUTPUT_DIR, output_file)

    writer = pd.ExcelWriter(output_file, engine="xlsxwriter")
    total_roles, total_users = 0, 0

    for profile in TARGET_PROFILES:
        _LOGGER.info(f"Scanning profile: {profile}")
        try:
            account_id, roles, users = check_iam_roles_and_users(profile)
            if roles:
                df_roles = pd.DataFrame(roles)
                df_roles.to_excel(writer, sheet_name=f"{profile[:30]}_Roles", index=False)
                total_roles += len(roles)
            if users:
                df_users = pd.DataFrame(users)
                df_users.to_excel(writer, sheet_name=f"{profile[:30]}_Users", index=False)
                total_users += len(users)
        except Exception as e:
            _LOGGER.error(f"Failed to process {profile}: {e}")
            _LOGGER.error(traceback.format_exc())

    writer.close()
    _LOGGER.info(f"Audit complete. Found {total_roles} suspicious roles and {total_users} suspicious users.")
    _LOGGER.info(f"Output saved to {output_file}")
